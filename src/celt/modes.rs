#[derive(Copy, Clone)]
#[repr(C)]
pub struct OpusCustomMode {
    pub(crate) Fs: i32,
    pub(crate) overlap: i32,
    pub(crate) nbEBands: i32,
    pub(crate) effEBands: i32,
    pub(crate) preemph: [opus_val16; 4],
    pub(crate) eBands: *const i16,
    pub(crate) maxLM: i32,
    pub(crate) nbShortMdcts: i32,
    pub(crate) shortMdctSize: i32,
    pub(crate) nbAllocVectors: i32,
    pub(crate) allocVectors: *const u8,
    pub(crate) logN: *const i16,
    pub(crate) window: *const opus_val16,
    pub(crate) mdct: mdct_lookup,
    pub(crate) cache: PulseCache,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PulseCache {
    pub size: i32,
    pub index: *const i16,
    pub bits: *const u8,
    pub caps: *const u8,
}
pub const MAX_PERIOD: i32 = 1024;

pub mod arch_h {
    pub type opus_val16 = f32;
}
pub mod stddef_h {
    pub const NULL: i32 = 0 as i32;
}

pub mod static_modes_float_h;

pub use self::arch_h::opus_val16;
pub use self::static_modes_float_h::{
    cache_bits50, cache_caps50, cache_index50, fft_bitrev120, fft_bitrev240, fft_bitrev480,
    fft_bitrev60, fft_twiddles48000_960, logN400, static_mode_list, window120, TOTAL_MODES,
};
pub use self::stddef_h::NULL;
use crate::celt::mdct::mdct_lookup;
use crate::src::opus_defines::{OPUS_BAD_ARG, OPUS_OK};

static mut eband5ms: [i16; 22] = [
    0 as i32 as i16,
    1 as i32 as i16,
    2 as i32 as i16,
    3 as i32 as i16,
    4 as i32 as i16,
    5 as i32 as i16,
    6 as i32 as i16,
    7 as i32 as i16,
    8 as i32 as i16,
    10 as i32 as i16,
    12 as i32 as i16,
    14 as i32 as i16,
    16 as i32 as i16,
    20 as i32 as i16,
    24 as i32 as i16,
    28 as i32 as i16,
    34 as i32 as i16,
    40 as i32 as i16,
    48 as i32 as i16,
    60 as i32 as i16,
    78 as i32 as i16,
    100 as i32 as i16,
];
static mut band_allocation: [u8; 231] = [
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    90 as i32 as u8,
    80 as i32 as u8,
    75 as i32 as u8,
    69 as i32 as u8,
    63 as i32 as u8,
    56 as i32 as u8,
    49 as i32 as u8,
    40 as i32 as u8,
    34 as i32 as u8,
    29 as i32 as u8,
    20 as i32 as u8,
    18 as i32 as u8,
    10 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    110 as i32 as u8,
    100 as i32 as u8,
    90 as i32 as u8,
    84 as i32 as u8,
    78 as i32 as u8,
    71 as i32 as u8,
    65 as i32 as u8,
    58 as i32 as u8,
    51 as i32 as u8,
    45 as i32 as u8,
    39 as i32 as u8,
    32 as i32 as u8,
    26 as i32 as u8,
    20 as i32 as u8,
    12 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    118 as i32 as u8,
    110 as i32 as u8,
    103 as i32 as u8,
    93 as i32 as u8,
    86 as i32 as u8,
    80 as i32 as u8,
    75 as i32 as u8,
    70 as i32 as u8,
    65 as i32 as u8,
    59 as i32 as u8,
    53 as i32 as u8,
    47 as i32 as u8,
    40 as i32 as u8,
    31 as i32 as u8,
    23 as i32 as u8,
    15 as i32 as u8,
    4 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    126 as i32 as u8,
    119 as i32 as u8,
    112 as i32 as u8,
    104 as i32 as u8,
    95 as i32 as u8,
    89 as i32 as u8,
    83 as i32 as u8,
    78 as i32 as u8,
    72 as i32 as u8,
    66 as i32 as u8,
    60 as i32 as u8,
    54 as i32 as u8,
    47 as i32 as u8,
    39 as i32 as u8,
    32 as i32 as u8,
    25 as i32 as u8,
    17 as i32 as u8,
    12 as i32 as u8,
    1 as i32 as u8,
    0 as i32 as u8,
    0 as i32 as u8,
    134 as i32 as u8,
    127 as i32 as u8,
    120 as i32 as u8,
    114 as i32 as u8,
    103 as i32 as u8,
    97 as i32 as u8,
    91 as i32 as u8,
    85 as i32 as u8,
    78 as i32 as u8,
    72 as i32 as u8,
    66 as i32 as u8,
    60 as i32 as u8,
    54 as i32 as u8,
    47 as i32 as u8,
    41 as i32 as u8,
    35 as i32 as u8,
    29 as i32 as u8,
    23 as i32 as u8,
    16 as i32 as u8,
    10 as i32 as u8,
    1 as i32 as u8,
    144 as i32 as u8,
    137 as i32 as u8,
    130 as i32 as u8,
    124 as i32 as u8,
    113 as i32 as u8,
    107 as i32 as u8,
    101 as i32 as u8,
    95 as i32 as u8,
    88 as i32 as u8,
    82 as i32 as u8,
    76 as i32 as u8,
    70 as i32 as u8,
    64 as i32 as u8,
    57 as i32 as u8,
    51 as i32 as u8,
    45 as i32 as u8,
    39 as i32 as u8,
    33 as i32 as u8,
    26 as i32 as u8,
    15 as i32 as u8,
    1 as i32 as u8,
    152 as i32 as u8,
    145 as i32 as u8,
    138 as i32 as u8,
    132 as i32 as u8,
    123 as i32 as u8,
    117 as i32 as u8,
    111 as i32 as u8,
    105 as i32 as u8,
    98 as i32 as u8,
    92 as i32 as u8,
    86 as i32 as u8,
    80 as i32 as u8,
    74 as i32 as u8,
    67 as i32 as u8,
    61 as i32 as u8,
    55 as i32 as u8,
    49 as i32 as u8,
    43 as i32 as u8,
    36 as i32 as u8,
    20 as i32 as u8,
    1 as i32 as u8,
    162 as i32 as u8,
    155 as i32 as u8,
    148 as i32 as u8,
    142 as i32 as u8,
    133 as i32 as u8,
    127 as i32 as u8,
    121 as i32 as u8,
    115 as i32 as u8,
    108 as i32 as u8,
    102 as i32 as u8,
    96 as i32 as u8,
    90 as i32 as u8,
    84 as i32 as u8,
    77 as i32 as u8,
    71 as i32 as u8,
    65 as i32 as u8,
    59 as i32 as u8,
    53 as i32 as u8,
    46 as i32 as u8,
    30 as i32 as u8,
    1 as i32 as u8,
    172 as i32 as u8,
    165 as i32 as u8,
    158 as i32 as u8,
    152 as i32 as u8,
    143 as i32 as u8,
    137 as i32 as u8,
    131 as i32 as u8,
    125 as i32 as u8,
    118 as i32 as u8,
    112 as i32 as u8,
    106 as i32 as u8,
    100 as i32 as u8,
    94 as i32 as u8,
    87 as i32 as u8,
    81 as i32 as u8,
    75 as i32 as u8,
    69 as i32 as u8,
    63 as i32 as u8,
    56 as i32 as u8,
    45 as i32 as u8,
    20 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    200 as i32 as u8,
    198 as i32 as u8,
    193 as i32 as u8,
    188 as i32 as u8,
    183 as i32 as u8,
    178 as i32 as u8,
    173 as i32 as u8,
    168 as i32 as u8,
    163 as i32 as u8,
    158 as i32 as u8,
    153 as i32 as u8,
    148 as i32 as u8,
    129 as i32 as u8,
    104 as i32 as u8,
];
pub unsafe fn opus_custom_mode_create(
    Fs: i32,
    frame_size: i32,
    error: *mut i32,
) -> *mut OpusCustomMode {
    let mut i: i32 = 0;
    i = 0 as i32;
    while i < TOTAL_MODES {
        let mut j: i32 = 0;
        j = 0 as i32;
        while j < 4 as i32 {
            if Fs == (*static_mode_list[i as usize]).Fs
                && frame_size << j
                    == (*static_mode_list[i as usize]).shortMdctSize
                        * (*static_mode_list[i as usize]).nbShortMdcts
            {
                if !error.is_null() {
                    *error = OPUS_OK;
                }
                return static_mode_list[i as usize] as *mut OpusCustomMode;
            }
            j += 1;
        }
        i += 1;
    }
    if !error.is_null() {
        *error = OPUS_BAD_ARG;
    }
    return NULL as *mut OpusCustomMode;
}
