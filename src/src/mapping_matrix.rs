pub mod arch_h {
    pub type opus_val16 = f32;
    pub type opus_val32 = f32;
}
use self::arch_h::{opus_val16, opus_val32};
use crate::celt::float_cast::FLOAT2INT16;
use crate::src::opus_private::align;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct MappingMatrix {
    pub rows: i32,
    pub cols: i32,
    pub gain: i32,
}

pub unsafe fn mapping_matrix_get_size(rows: i32, cols: i32) -> i32 {
    let mut size: i32 = 0;
    if rows > 255 || cols > 255 {
        return 0;
    }
    size = ((rows * cols) as u64).wrapping_mul(::core::mem::size_of::<i16>() as u64) as i32;
    if size > 65004 {
        return 0;
    }
    return align(::core::mem::size_of::<MappingMatrix>() as u64 as i32) + align(size);
}
pub unsafe fn mapping_matrix_get_data(matrix: *const MappingMatrix) -> *mut i16 {
    return (matrix as *mut i8)
        .offset(align(::core::mem::size_of::<MappingMatrix>() as u64 as i32) as isize)
        as *mut core::ffi::c_void as *mut i16;
}
pub unsafe fn mapping_matrix_init(
    matrix: *mut MappingMatrix,
    rows: i32,
    cols: i32,
    gain: i32,
    data: *const i16,
    data_size: i32,
) {
    let mut i: i32 = 0;
    let mut ptr: *mut i16 = 0 as *mut i16;
    assert!(
        align(data_size)
            == align(
                ((rows * cols) as u64).wrapping_mul(::core::mem::size_of::<i16>() as u64) as i32
            )
    );

    (*matrix).rows = rows;
    (*matrix).cols = cols;
    (*matrix).gain = gain;
    ptr = mapping_matrix_get_data(matrix);
    i = 0;
    while i < rows * cols {
        *ptr.offset(i as isize) = *data.offset(i as isize);
        i += 1;
    }
}
pub unsafe fn mapping_matrix_multiply_channel_in_float(
    matrix: *const MappingMatrix,
    input: *const f32,
    input_rows: i32,
    output: *mut opus_val16,
    output_row: i32,
    output_rows: i32,
    frame_size: i32,
) {
    let mut matrix_data: *mut i16 = 0 as *mut i16;
    let mut i: i32 = 0;
    let mut col: i32 = 0;
    assert!(input_rows <= (*matrix).cols && output_rows <= (*matrix).rows);
    matrix_data = mapping_matrix_get_data(matrix);
    i = 0;
    while i < frame_size {
        let mut tmp: f32 = 0 as f32;
        col = 0;
        while col < input_rows {
            tmp += *matrix_data.offset(((*matrix).rows * col + output_row) as isize) as i32 as f32
                * *input.offset((input_rows * i + col) as isize);
            col += 1;
        }
        *output.offset((output_rows * i) as isize) = 1 as f32 / 32768.0f32 * tmp;
        i += 1;
    }
}
pub unsafe fn mapping_matrix_multiply_channel_out_float(
    matrix: *const MappingMatrix,
    input: *const opus_val16,
    input_row: i32,
    input_rows: i32,
    output: *mut f32,
    output_rows: i32,
    frame_size: i32,
) {
    let mut matrix_data: *mut i16 = 0 as *mut i16;
    let mut i: i32 = 0;
    let mut row: i32 = 0;
    let mut input_sample: f32 = 0.;
    assert!(input_rows <= (*matrix).cols && output_rows <= (*matrix).rows);
    matrix_data = mapping_matrix_get_data(matrix);
    i = 0;
    while i < frame_size {
        input_sample = *input.offset((input_rows * i) as isize);
        row = 0;
        while row < output_rows {
            let tmp: f32 = 1 as f32 / 32768.0f32
                * *matrix_data.offset(((*matrix).rows * input_row + row) as isize) as i32 as f32
                * input_sample;
            *output.offset((output_rows * i + row) as isize) += tmp;
            row += 1;
        }
        i += 1;
    }
}
pub unsafe fn mapping_matrix_multiply_channel_in_short(
    matrix: *const MappingMatrix,
    input: *const i16,
    input_rows: i32,
    output: *mut opus_val16,
    output_row: i32,
    output_rows: i32,
    frame_size: i32,
) {
    let mut matrix_data: *mut i16 = 0 as *mut i16;
    let mut i: i32 = 0;
    let mut col: i32 = 0;
    assert!(input_rows <= (*matrix).cols && output_rows <= (*matrix).rows);
    matrix_data = mapping_matrix_get_data(matrix);
    i = 0;
    while i < frame_size {
        let mut tmp: opus_val32 = 0 as opus_val32;
        col = 0;
        while col < input_rows {
            tmp += (*matrix_data.offset(((*matrix).rows * col + output_row) as isize) as i32
                * *input.offset((input_rows * i + col) as isize) as i32) as f32;
            col += 1;
        }
        *output.offset((output_rows * i) as isize) = 1 as f32 / (32768.0f32 * 32768.0f32) * tmp;
        i += 1;
    }
}
pub unsafe fn mapping_matrix_multiply_channel_out_short(
    matrix: *const MappingMatrix,
    input: *const opus_val16,
    input_row: i32,
    input_rows: i32,
    output: *mut i16,
    output_rows: i32,
    frame_size: i32,
) {
    let mut matrix_data: *mut i16 = 0 as *mut i16;
    let mut i: i32 = 0;
    let mut row: i32 = 0;
    let mut input_sample: i32 = 0;
    assert!(input_rows <= (*matrix).cols && output_rows <= (*matrix).rows);
    matrix_data = mapping_matrix_get_data(matrix);
    i = 0;
    while i < frame_size {
        input_sample = FLOAT2INT16(*input.offset((input_rows * i) as isize)) as i32;
        row = 0;
        while row < output_rows {
            let tmp: i32 = *matrix_data.offset(((*matrix).rows * input_row + row) as isize) as i32
                * input_sample;
            let ref mut fresh0 = *output.offset((output_rows * i + row) as isize);
            *fresh0 = (*fresh0 as i32 + (tmp + 16384 >> 15)) as i16;
            row += 1;
        }
        i += 1;
    }
}
pub static mut mapping_matrix_foa_mixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 6,
        cols: 6,
        gain: 0,
    };
    init
};
pub static mut mapping_matrix_foa_mixing_data: [i16; 36] = [
    16384,
    0,
    -(16384) as i16,
    23170,
    0,
    0,
    16384,
    23170,
    16384,
    0,
    0,
    0,
    16384,
    0,
    -(16384) as i16,
    -(23170) as i16,
    0,
    0,
    16384,
    -(23170) as i16,
    16384,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
];
pub static mut mapping_matrix_soa_mixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 11,
        cols: 11,
        gain: 0,
    };
    init
};
pub static mut mapping_matrix_soa_mixing_data: [i16; 121] = [
    10923,
    7723,
    13377,
    -(13377) as i16,
    11585,
    9459,
    7723,
    -(16384) as i16,
    -(6689) as i16,
    0,
    0,
    10923,
    7723,
    13377,
    13377,
    -(11585) as i16,
    9459,
    7723,
    16384,
    -(6689) as i16,
    0,
    0,
    10923,
    -(15447) as i16,
    13377,
    0,
    0,
    -(18919) as i16,
    7723,
    0,
    13377,
    0,
    0,
    10923,
    7723,
    -(13377) as i16,
    -(13377) as i16,
    11585,
    -(9459) as i16,
    7723,
    16384,
    -(6689) as i16,
    0,
    0,
    10923,
    -(7723) as i16,
    0,
    13377,
    -(16384) as i16,
    0,
    -(15447) as i16,
    0,
    9459,
    0,
    0,
    10923,
    -(7723) as i16,
    0,
    -(13377) as i16,
    16384,
    0,
    -(15447) as i16,
    0,
    9459,
    0,
    0,
    10923,
    15447,
    0,
    0,
    0,
    0,
    -(15447) as i16,
    0,
    -(18919) as i16,
    0,
    0,
    10923,
    7723,
    -(13377) as i16,
    13377,
    -(11585) as i16,
    -(9459) as i16,
    7723,
    -(16384) as i16,
    -(6689) as i16,
    0,
    0,
    10923,
    -(15447) as i16,
    -(13377) as i16,
    0,
    0,
    18919,
    7723,
    0,
    13377,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
];
pub static mut mapping_matrix_toa_mixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 18,
        cols: 18,
        gain: 0,
    };
    init
};
pub static mut mapping_matrix_toa_mixing_data: [i16; 324] = [
    8208,
    0,
    -(881) as i16,
    14369,
    0,
    0,
    -(8192) as i16,
    -(4163) as i16,
    13218,
    0,
    0,
    0,
    11095,
    -(8836) as i16,
    -(6218) as i16,
    14833,
    0,
    0,
    8208,
    -(10161) as i16,
    881,
    10161,
    -(13218) as i16,
    -(2944) as i16,
    -(8192) as i16,
    2944,
    0,
    -(10488) as i16,
    -(6218) as i16,
    6248,
    -(11095) as i16,
    -(6248) as i16,
    0,
    -(10488) as i16,
    0,
    0,
    8208,
    10161,
    881,
    -(10161) as i16,
    -(13218) as i16,
    2944,
    -(8192) as i16,
    -(2944) as i16,
    0,
    10488,
    -(6218) as i16,
    -(6248) as i16,
    -(11095) as i16,
    6248,
    0,
    10488,
    0,
    0,
    8176,
    5566,
    -(11552) as i16,
    5566,
    9681,
    -(11205) as i16,
    8192,
    -(11205) as i16,
    0,
    4920,
    -(15158) as i16,
    9756,
    -(3334) as i16,
    9756,
    0,
    -(4920) as i16,
    0,
    0,
    8176,
    7871,
    11552,
    0,
    0,
    15846,
    8192,
    0,
    -(9681) as i16,
    -(6958) as i16,
    0,
    13797,
    3334,
    0,
    -(15158) as i16,
    0,
    0,
    0,
    8176,
    0,
    11552,
    7871,
    0,
    0,
    8192,
    15846,
    9681,
    0,
    0,
    0,
    3334,
    13797,
    15158,
    6958,
    0,
    0,
    8176,
    5566,
    -(11552) as i16,
    -(5566) as i16,
    -(9681) as i16,
    -(11205) as i16,
    8192,
    11205,
    0,
    4920,
    15158,
    9756,
    -(3334) as i16,
    -(9756) as i16,
    0,
    4920,
    0,
    0,
    8208,
    14369,
    -(881) as i16,
    0,
    0,
    -(4163) as i16,
    -(8192) as i16,
    0,
    -(13218) as i16,
    -(14833) as i16,
    0,
    -(8836) as i16,
    11095,
    0,
    6218,
    0,
    0,
    0,
    8208,
    10161,
    881,
    10161,
    13218,
    2944,
    -(8192) as i16,
    2944,
    0,
    10488,
    6218,
    -(6248) as i16,
    -(11095) as i16,
    -(6248) as i16,
    0,
    -(10488) as i16,
    0,
    0,
    8208,
    -(14369) as i16,
    -(881) as i16,
    0,
    0,
    4163,
    -(8192) as i16,
    0,
    -(13218) as i16,
    14833,
    0,
    8836,
    11095,
    0,
    6218,
    0,
    0,
    0,
    8208,
    0,
    -(881) as i16,
    -(14369) as i16,
    0,
    0,
    -(8192) as i16,
    4163,
    13218,
    0,
    0,
    0,
    11095,
    8836,
    -(6218) as i16,
    -(14833) as i16,
    0,
    0,
    8176,
    -(5566) as i16,
    -(11552) as i16,
    5566,
    -(9681) as i16,
    11205,
    8192,
    -(11205) as i16,
    0,
    -(4920) as i16,
    15158,
    -(9756) as i16,
    -(3334) as i16,
    9756,
    0,
    -(4920) as i16,
    0,
    0,
    8176,
    0,
    11552,
    -(7871) as i16,
    0,
    0,
    8192,
    -(15846) as i16,
    9681,
    0,
    0,
    0,
    3334,
    -(13797) as i16,
    15158,
    -(6958) as i16,
    0,
    0,
    8176,
    -(7871) as i16,
    11552,
    0,
    0,
    -(15846) as i16,
    8192,
    0,
    -(9681) as i16,
    6958,
    0,
    -(13797) as i16,
    3334,
    0,
    -(15158) as i16,
    0,
    0,
    0,
    8176,
    -(5566) as i16,
    -(11552) as i16,
    -(5566) as i16,
    9681,
    11205,
    8192,
    11205,
    0,
    -(4920) as i16,
    -(15158) as i16,
    -(9756) as i16,
    -(3334) as i16,
    -(9756) as i16,
    0,
    4920,
    0,
    0,
    8208,
    -(10161) as i16,
    881,
    -(10161) as i16,
    13218,
    -(2944) as i16,
    -(8192) as i16,
    -(2944) as i16,
    0,
    -(10488) as i16,
    6218,
    6248,
    -(11095) as i16,
    6248,
    0,
    10488,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
];
pub static mut mapping_matrix_foa_demixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 6,
        cols: 6,
        gain: 0,
    };
    init
};
pub static mut mapping_matrix_foa_demixing_data: [i16; 36] = [
    16384,
    16384,
    16384,
    16384,
    0,
    0,
    0,
    23170,
    0,
    -(23170) as i16,
    0,
    0,
    -(16384) as i16,
    16384,
    -(16384) as i16,
    16384,
    0,
    0,
    23170,
    0,
    -(23170) as i16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
];
pub static mut mapping_matrix_soa_demixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 11,
        cols: 11,
        gain: 3050,
    };
    init
};
pub static mut mapping_matrix_soa_demixing_data: [i16; 121] = [
    2771,
    2771,
    2771,
    2771,
    2771,
    2771,
    2771,
    2771,
    2771,
    0,
    0,
    10033,
    10033,
    -(20066) as i16,
    10033,
    14189,
    14189,
    -(28378) as i16,
    10033,
    -(20066) as i16,
    0,
    0,
    3393,
    3393,
    3393,
    -(3393) as i16,
    0,
    0,
    0,
    -(3393) as i16,
    -(3393) as i16,
    0,
    0,
    -(17378) as i16,
    17378,
    0,
    -(17378) as i16,
    -(24576) as i16,
    24576,
    0,
    17378,
    0,
    0,
    0,
    -(14189) as i16,
    14189,
    0,
    -(14189) as i16,
    -(28378) as i16,
    28378,
    0,
    14189,
    0,
    0,
    0,
    2399,
    2399,
    -(4799) as i16,
    -(2399) as i16,
    0,
    0,
    0,
    -(2399) as i16,
    4799,
    0,
    0,
    1959,
    1959,
    1959,
    1959,
    -(3918) as i16,
    -(3918) as i16,
    -(3918) as i16,
    1959,
    1959,
    0,
    0,
    -(4156) as i16,
    4156,
    0,
    4156,
    0,
    0,
    0,
    -(4156) as i16,
    0,
    0,
    0,
    8192,
    8192,
    -(16384) as i16,
    8192,
    16384,
    16384,
    -(32768) as i16,
    8192,
    -(16384) as i16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8312,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8312,
];
pub static mut mapping_matrix_toa_demixing: MappingMatrix = {
    let init = MappingMatrix {
        rows: 18,
        cols: 18,
        gain: 0,
    };
    init
};
pub static mut mapping_matrix_toa_demixing_data: [i16; 324] = [
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    8192,
    0,
    0,
    0,
    -(9779) as i16,
    9779,
    6263,
    8857,
    0,
    6263,
    13829,
    9779,
    -(13829) as i16,
    0,
    -(6263) as i16,
    0,
    -(8857) as i16,
    -(6263) as i16,
    -(9779) as i16,
    0,
    0,
    -(3413) as i16,
    3413,
    3413,
    -(11359) as i16,
    11359,
    11359,
    -(11359) as i16,
    -(3413) as i16,
    3413,
    -(3413) as i16,
    -(3413) as i16,
    -(11359) as i16,
    11359,
    11359,
    -(11359) as i16,
    3413,
    0,
    0,
    13829,
    9779,
    -(9779) as i16,
    6263,
    0,
    8857,
    -(6263) as i16,
    0,
    9779,
    0,
    -(13829) as i16,
    6263,
    -(8857) as i16,
    0,
    -(6263) as i16,
    -(9779) as i16,
    0,
    0,
    0,
    -(15617) as i16,
    -(15617) as i16,
    6406,
    0,
    0,
    -(6406) as i16,
    0,
    15617,
    0,
    0,
    -(6406) as i16,
    0,
    0,
    6406,
    15617,
    0,
    0,
    0,
    -(5003) as i16,
    5003,
    -(10664) as i16,
    15081,
    0,
    -(10664) as i16,
    -(7075) as i16,
    5003,
    7075,
    0,
    10664,
    0,
    -(15081) as i16,
    10664,
    -(5003) as i16,
    0,
    0,
    -(8176) as i16,
    -(8176) as i16,
    -(8176) as i16,
    8208,
    8208,
    8208,
    8208,
    -(8176) as i16,
    -(8176) as i16,
    -(8176) as i16,
    -(8176) as i16,
    8208,
    8208,
    8208,
    8208,
    -(8176) as i16,
    0,
    0,
    -(7075) as i16,
    5003,
    -(5003) as i16,
    -(10664) as i16,
    0,
    15081,
    10664,
    0,
    5003,
    0,
    7075,
    -(10664) as i16,
    -(15081) as i16,
    0,
    10664,
    -(5003) as i16,
    0,
    0,
    15617,
    0,
    0,
    0,
    -(6406) as i16,
    6406,
    0,
    -(15617) as i16,
    0,
    -(15617) as i16,
    15617,
    0,
    6406,
    -(6406) as i16,
    0,
    0,
    0,
    0,
    0,
    -(11393) as i16,
    11393,
    2993,
    -(4233) as i16,
    0,
    2993,
    -(16112) as i16,
    11393,
    16112,
    0,
    -(2993) as i16,
    0,
    4233,
    -(2993) as i16,
    -(11393) as i16,
    0,
    0,
    0,
    -(9974) as i16,
    -(9974) as i16,
    -(13617) as i16,
    0,
    0,
    13617,
    0,
    9974,
    0,
    0,
    13617,
    0,
    0,
    -(13617) as i16,
    9974,
    0,
    0,
    0,
    5579,
    -(5579) as i16,
    10185,
    14403,
    0,
    10185,
    -(7890) as i16,
    -(5579) as i16,
    7890,
    0,
    -(10185) as i16,
    0,
    -(14403) as i16,
    -(10185) as i16,
    5579,
    0,
    0,
    11826,
    -(11826) as i16,
    -(11826) as i16,
    -(901) as i16,
    901,
    901,
    -(901) as i16,
    11826,
    -(11826) as i16,
    11826,
    11826,
    -(901) as i16,
    901,
    901,
    -(901) as i16,
    -(11826) as i16,
    0,
    0,
    -(7890) as i16,
    -(5579) as i16,
    5579,
    10185,
    0,
    14403,
    -(10185) as i16,
    0,
    -(5579) as i16,
    0,
    7890,
    10185,
    -(14403) as i16,
    0,
    -(10185) as i16,
    5579,
    0,
    0,
    -(9974) as i16,
    0,
    0,
    0,
    -(13617) as i16,
    13617,
    0,
    9974,
    0,
    9974,
    -(9974) as i16,
    0,
    13617,
    -(13617) as i16,
    0,
    0,
    0,
    0,
    16112,
    -(11393) as i16,
    11393,
    -(2993) as i16,
    0,
    4233,
    2993,
    0,
    -(11393) as i16,
    0,
    -(16112) as i16,
    -(2993) as i16,
    -(4233) as i16,
    0,
    2993,
    11393,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    32767,
];
